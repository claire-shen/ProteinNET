package com.example.demo.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.time.LocalDate;
import org.springframework.format.annotation.DateTimeFormat;


@Controller // This means that this class is a Controller
@RequestMapping(value="/index") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(value="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (
            @RequestParam String lastName,
            @RequestParam String firstName,
            @RequestParam String address,
            @RequestParam String city,
            @RequestParam Boolean freePass,
            @RequestParam Integer squat,
            @RequestParam Integer bench,
            @RequestParam Integer deadlift,
            @RequestParam String height,
            @RequestParam Float fee,
            @RequestParam("birthDate")
            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate birthDate) {


        // Create a new User object and set its properties
        User user = new User();
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setAddress(address);
        user.setCity(city);
        user.setFreePass(freePass);
        user.setFee(fee);
        user.setSquat(squat);
        user.setBench(bench);
        user.setDeadlift(deadlift);
        user.setHeight(height);
        user.setBirthDate(birthDate);

        // Save the user object to the database
        userRepository.save(user);

        // Return a response
        return "User saved successfully!";
    }

    @GetMapping(value="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}